/*******************************************************************************
 * Copyright (c) 2012 Gary F. Pollice
 * 
 * All rights reserved. This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 *  * Contributors:
 *    gpollice
 *    rpdabrowski
 *******************************************************************************/

package tdd;

/**
 * <p>
 * This class implements a converter that takes a string that represents a
 * number in either Arabic or Roman numeral form and offers methods that will
 * return either the integer value or a string representing the value in Roman
 * numeral form.
 * </p>
 * <p>
 * Roman numerals are specified and presented as strings according to the <a
 * href="http://en.wikipedia.org/wiki/Roman_numerals#Reading_Roman_numerals">
 * Reading Roman Numerals</a> section of the Wikipedia Roman Numerals Page.
 * </p>
 * <p>
 * <strong>NOTE</strong>:<br/>
 * You will not need to handle alternate forms like "IIII" etc. Also, the
 * acceptable range of values for numbers is 1..3999.
 * 
 * @author rpdabrowski, gpollice
 * @version 2.0.1
 */
public class RomanArabicConverter {
	/**
	 * Constructor that takes in a string. The string should contain either a
	 * valid Roman numeral or a valid Arabic numeral. The string can have
	 * leading and/or trailing spaces. There are no spaces within the actual
	 * number characters. If the string represents an Arabic number, it may be
	 * positive or negative. It will never be larger than a value that can fit
	 * into an int.
	 * 
	 * @param value
	 *            the string representing the Roman or Arabic number.
	 * @throws MalformedNumberException
	 *             if the string (less leading and trailing spaces) does not
	 *             represent a valid Roman or Arabic number.
	 *             <strong>NOTE</strong>: an Arabic number may be out of the
	 *             acceptable range and will still be accepted by this
	 *             constructor.
	 */

	String value;
	Boolean isArabic;

	public RomanArabicConverter(String value) throws MalformedNumberException {
		// trim all the whitespace
		value = removeWhitespace(value);

		this.value = value;
		
		// check to see if the result is valid and what type it is.
		switch(checkValid(value)){
			case 1:
				this.isArabic = true;
				break;
			case 2:
				this.isArabic = false;
		}		
	}

	/**
	 * @return the integer value of the number given
	 */
	public int toArabic() {
		Integer sum = new Integer(0);
		int i = 0;		
		
		if(!isArabic){
		//iterate through the roman numerals
		while(i < this.value.length()){
			char ch = this.value.toCharArray()[i];
			int num = romanLookupValues(ch);
			
			i++;
			
			if (i == value.length()) {
                  //last number in sequence, never have to worry about subtracting
                  sum += num;
               }
               else {
                  //if the next number is greater, need to subtract the first num from the second
                  int num2 = romanLookupValues(this.value.charAt(i));
                  
                  if (num2 > num) {
                     sum += (num2 - num);
                     i++;
                  }
                  else {
                     //simple addition if the above case is not true in this instance
                     sum += num;
                  }
               }
		}
		}
			else{
				sum.parseInt(value);
			}
		//System.out.println(sum);
		return sum;
	}

	/**
	 * @return the string that represents the value of the number as a Roman
	 *         numeral.
	 * @throws ValueOutOfBoundsException
	 *             if the number is too small or too large to be represented
	 *             using Roman numerals as specified in <a href=
	 *             "http://en.wikipedia.org/wiki/Roman_numerals#Reading_Roman_numerals"
	 *             > Reading Roman Numerals</a>
	 */
	public String toRoman() throws ValueOutOfBoundsException {
		// TODO: Convert numbers to Roman numerals
		return "I";
	}

	private String removeWhitespace(String input) {
		String output = new String();

		// walk the string to look for whitespace and remove
		for (int i = 0; i < input.length(); i++) {
			String c = input.substring(i, i + 1);
			if (!c.equals(" "))
				output += c;
		}
		return output;
	}

	private int checkValid(String input) throws MalformedNumberException {

		// check the null condition
		if (input == null)
			throw new MalformedNumberException("Cannot parse null input.");

		// check to see if the string is a number
		if(this.value.matches("[0123456789]+")){
			return 1;
		}
		// check to see if the string is a Roman numeral
		else if (this.value.matches("[IVXLDM]+")) {
			return 2;
		} else {
			throw new MalformedNumberException("Contains illegal characters");
		}
	}

	//do we need this with my addition?
	private boolean checkRoman(String input) {
		String checkRoman = "IVXLCDM";
		String check, ref;

		for (int i = 0; i < input.length(); i++) {
			for (int j = 0; j < checkRoman.length(); j++) {
				check = input.substring(i, i + 1);
				ref = checkRoman.substring(j, j + 1);
			}
		}
		return true;
	}

	//do we need this with my addition?
	private boolean checkNum(String input) throws ValueOutOfBoundsException {
		String checkNum = "0123456789";
		String check, ref;

		for (int i = 0; i < input.length(); i++) {
			for (int j = 0; j < checkNum.length(); j++) {
				check = input.substring(i, i + 1); 
				ref = checkNum.substring(j, j + 1);
			}
		}
		return false;
	}

	private int romanLookupValues(char input){
		switch(input){
			case 'I':  
				return 1;
            case 'V':  
				return 5;
            case 'X':  
				return 10;
            case 'L':  
				return 50;
            case 'C':  
				return 100;
            case 'D':  
				return 500;
            case 'M':  
				return 1000;
		}
		return 0;
	}

	private int parseNum(String input) throws ValueOutOfBoundsException, MalformedNumberException {
		int output = 0;

		for (int i = 0; i < input.length(); i++) {

			switch (input.substring(i, i + 1)) {
			case "1":
				output += 1;
				break;
			case "2":
				output += 2;
				break;
			case "3":
				output += 3;
				break;
			case "4":
				output += 4;
				break;
			case "5":
				output += 5;
				break;
			case "6":
				output += 6;
				break;
			case "7":
				output += 7;
				break;
			case "8":
				output += 8;
				break;
			case "9":
				output += 9;
				break;
			case "0": // do nothing because 0
				break;
			default:
				throw new MalformedNumberException("only numbers or only numerals are allowed.");
			}
		}

		if (output > 3999) {
			throw new ValueOutOfBoundsException("you may only enter numbers between 1 and 3999");
		}
		
		return output;
	}
}
